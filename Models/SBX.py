from typing import Any, Dict, Literal, Optional, Tuple, Type, Union

from sbx import SAC, TQC
from stable_baselines3.common.buffers import ReplayBuffer
from stable_baselines3.common.noise import ActionNoise
from stable_baselines3.common.type_aliases import GymEnv, Schedule


class SAC(SAC):
  def __init__(
    self,
    policy,
    env: Union[GymEnv, str],
    learning_rate: Union[float, Schedule] = 3e-4,
    qf_learning_rate: Optional[float] = None,
    buffer_size: int = 1_000_000,  # 1e6
    learning_starts: int = 100,
    batch_size: int = 256,
    tau: float = 0.005,
    gamma: float = 0.99,
    train_freq: Union[int, Tuple[int, str]] = 1,
    gradient_steps: int = 1,
    policy_delay: int = 1,
    action_noise: Optional[ActionNoise] = None,
    replay_buffer_class: Optional[Type[ReplayBuffer]] = None,
    replay_buffer_kwargs: Optional[Dict[str, Any]] = None,
    ent_coef: Union[str, float] = "auto",
    target_entropy: Union[Literal["auto"], float] = "auto",
    use_sde: bool = False,
    sde_sample_freq: int = -1,
    use_sde_at_warmup: bool = False,
    tensorboard_log: Optional[str] = None,
    policy_kwargs: Optional[Dict[str, Any]] = None,
    verbose: int = 0,
    seed: Optional[int] = None,
    device: str = "auto",
    _init_setup_model: bool = True,
    **kwags,
  ):
    super().__init__(
      policy=policy,
      env=env,
      learning_rate=learning_rate,
      qf_learning_rate=qf_learning_rate,
      buffer_size=buffer_size,
      learning_starts=learning_starts,
      batch_size=batch_size,
      tau=tau,
      gamma=gamma,
      train_freq=train_freq,
      gradient_steps=gradient_steps,
      policy_delay=policy_delay,
      action_noise=action_noise,
      replay_buffer_class=replay_buffer_class,
      replay_buffer_kwargs=replay_buffer_kwargs,
      ent_coef=ent_coef,
      target_entropy=target_entropy,
      use_sde=use_sde,
      sde_sample_freq=sde_sample_freq,
      use_sde_at_warmup=use_sde_at_warmup,
      tensorboard_log=tensorboard_log,
      policy_kwargs=policy_kwargs,
      verbose=verbose,
      seed=seed,
      device=device,
      _init_setup_model=_init_setup_model,
    )
    # Ignore kwags for compatibity


class TQC(TQC):
  def __init__(
    self,
    policy,
    env: Union[GymEnv, str],
    learning_rate: Union[float, Schedule] = 3e-4,
    qf_learning_rate: Optional[float] = None,
    buffer_size: int = 1_000_000,  # 1e6
    learning_starts: int = 100,
    batch_size: int = 256,
    tau: float = 0.005,
    gamma: float = 0.99,
    train_freq: Union[int, Tuple[int, str]] = 1,
    gradient_steps: int = 1,
    policy_delay: int = 1,
    top_quantiles_to_drop_per_net: int = 2,
    action_noise: Optional[ActionNoise] = None,
    replay_buffer_class: Optional[Type[ReplayBuffer]] = None,
    replay_buffer_kwargs: Optional[Dict[str, Any]] = None,
    ent_coef: Union[str, float] = "auto",
    target_entropy: Union[Literal["auto"], float] = "auto",
    use_sde: bool = False,
    sde_sample_freq: int = -1,
    use_sde_at_warmup: bool = False,
    tensorboard_log: Optional[str] = None,
    policy_kwargs: Optional[Dict[str, Any]] = None,
    verbose: int = 0,
    seed: Optional[int] = None,
    device: str = "auto",
    _init_setup_model: bool = True,
    **kwags,
  ):
    super().__init__(
      policy=policy,
      env=env,
      learning_rate=learning_rate,
      qf_learning_rate=qf_learning_rate,
      buffer_size=buffer_size,
      learning_starts=learning_starts,
      batch_size=batch_size,
      tau=tau,
      gamma=gamma,
      train_freq=train_freq,
      gradient_steps=gradient_steps,
      policy_delay=policy_delay,
      top_quantiles_to_drop_per_net=top_quantiles_to_drop_per_net,
      action_noise=action_noise,
      replay_buffer_class=replay_buffer_class,
      replay_buffer_kwargs=replay_buffer_kwargs,
      ent_coef=ent_coef,
      target_entropy=target_entropy,
      use_sde=use_sde,
      sde_sample_freq=sde_sample_freq,
      use_sde_at_warmup=use_sde_at_warmup,
      tensorboard_log=tensorboard_log,
      policy_kwargs=policy_kwargs,
      verbose=verbose,
      seed=seed,
      device=device,
      _init_setup_model=_init_setup_model,
    )
    # Ignore kwags for compatibity
