Ant-v5:
  trial_number: 33
  value: 993.7933408000001
  params:
    batch_size: 64
    n_steps: 256
    gamma: 0.9
    learning_rate: 0.011345042877629868
    ent_coef: 0.0006300346375901035
    clip_range: 0.3
    n_epochs: 1
    gae_lambda: 0.99
    max_grad_norm: 0.3
    vf_coef: 0.9467710647343072
    net_arch: small
    activation_fn: relu
    n_timesteps: 100000
    n_envs: 10
  comment: 'Best trial details: _number=33, state=1, _values=[993.7933408000001],
    _datetime_start=2025-01-30 10:01:40.280570, datetime_complete=2025-01-30 10:22:56.088410,
    _params={''batch_size'': 64, ''n_steps'': 256, ''gamma'': 0.9, ''learning_rate'':
    0.011345042877629868, ''ent_coef'': 0.0006300346375901035, ''clip_range'': 0.3,
    ''n_epochs'': 1, ''gae_lambda'': 0.99, ''max_grad_norm'': 0.3, ''vf_coef'': 0.9467710647343072,
    ''net_arch'': ''small'', ''activation_fn'': ''relu'', ''n_timesteps'': 100000,
    ''n_envs'': 10}, _user_attrs={}, _system_attrs={''completed_rung_0'': 983.6266146,
    ''completed_rung_1'': 985.533929}, intermediate_values={1: 983.6266146, 2: 968.1542380000001,
    3: 974.7644764, 4: 985.533929, 5: 992.9476066000001, 6: 995.7207328000001, 7:
    996.7959278000001, 8: 993.7933408000001}, _distributions={''batch_size'': CategoricalDistribution(choices=(8,
    16, 32, 64, 128, 256, 512)), ''n_steps'': CategoricalDistribution(choices=(8,
    16, 32, 64, 128, 256, 512, 1024, 2048)), ''gamma'': CategoricalDistribution(choices=(0.9,
    0.95, 0.98, 0.99, 0.995, 0.999, 0.9999)), ''learning_rate'': FloatDistribution(high=1.0,
    log=True, low=1e-05, step=None), ''ent_coef'': FloatDistribution(high=0.1, log=True,
    low=1e-08, step=None), ''clip_range'': CategoricalDistribution(choices=(0.1, 0.2,
    0.3, 0.4)), ''n_epochs'': CategoricalDistribution(choices=(1, 5, 10, 20)), ''gae_lambda'':
    CategoricalDistribution(choices=(0.8, 0.9, 0.92, 0.95, 0.98, 0.99, 1.0)), ''max_grad_norm'':
    CategoricalDistribution(choices=(0.3, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 2, 5)), ''vf_coef'':
    FloatDistribution(high=1.0, log=False, low=0.0, step=None), ''net_arch'': CategoricalDistribution(choices=(''tiny'',
    ''small'', ''medium'')), ''activation_fn'': CategoricalDistribution(choices=(''tanh'',
    ''relu'')), ''n_timesteps'': IntDistribution(high=1000000, log=False, low=100000,
    step=100000), ''n_envs'': CategoricalDistribution(choices=(2, 4, 6, 8, 10))},
    _trial_id=33'
